#include "environment.h"
#include <iostream>
#include <string.h>
#include <GL/glut.h>    // Header File For The GLUT Library 
#include <GL/gl.h>	// Header File For The OpenGL32 Library
#include <GL/glu.h>	// Header File For The GLu32 Library
#include <unistd.h>     // needed to sleep

using namespace std;

int TOP_BOUND = 0;
int BOTTOM_BOUND = NUM_OF_HEIGHT - 1;
int LEFT_BOUND = 0;
int RIGHT_BOUND = NUM_OF_WIDTH - 1;
float MAZE_WIDTH = NUM_OF_WIDTH * GRID_WIDTH;
float MAZE_HIEGHT = NUM_OF_HEIGHT * GRID_WIDTH;
int window; 

Environment::Environment(): 
			initialState({0, 1}),
			finalState({1, 4}),
			state({0, 1}),
			terminal(false),
			bumpIntoWall(false) {
}

void Environment::action(int direction) {
	bumpIntoWall = false;
	switch(direction) {
		case 0: {
			if(maze.mazeGrid[state[0]][state[1]]._nW == true) {
				bumpIntoWall = true;
				break;
			} else {
				state[0] -= 1;
			}

			break;
		}
		case 1: {
			if(maze.mazeGrid[state[0]][state[1]]._eW == true) {
				bumpIntoWall = true;
				break;
			} else {
				state[1] += 1;
			}


			break;
		}
		case 2: {
			if(maze.mazeGrid[state[0]][state[1]]._sW == true) {
				bumpIntoWall = true;
				break;
			} else {
				state[0] += 1;
			}


			break;
		}
		case 3: {
			if(maze.mazeGrid[state[0]][state[1]]._wW == true) {
				bumpIntoWall = true;
				break;
			} else {
				state[1] -= 1;
			}


			break;
		}
	}
	if(state[0] == finalState[0] && state[1] == finalState[1]) {
		terminal = true;
	}
}



void Environment::reset() {
	state[0] = initialState[0];
	state[1] = initialState[1];
	terminal = false;
	bumpIntoWall = false;
}

Maze::Maze() {
	setMap();
	//printMap();
}
		
void Maze::setMap() {
	mazeGrid[0][1]._eW = false;
	mazeGrid[0][2]._wW = false;
	mazeGrid[0][2]._eW = false;
	mazeGrid[0][2]._sW = false;
	mazeGrid[0][3]._eW = false;
	mazeGrid[0][3]._wW = false;
	mazeGrid[0][4]._sW = false;
	mazeGrid[0][4]._wW = false;
	mazeGrid[1][2]._nW = false;
	mazeGrid[1][4]._nW = false;
}

void Maze::printMap() {
	for(int i = 0; i < NUM_OF_HEIGHT; i++) {
		for(int j = 0; j < NUM_OF_WIDTH; j++) {
			cout << (int)(mazeGrid[i][j]._nW == false) << ",";
		}
		cout << "\b\n";
	}
}

MazeGrid::MazeGrid(): 	
			_eW(true),
			_sW(true),
			_wW(true),
			_nW(true) {

}

MazeGrid::MazeGrid(bool eW, bool sW, bool wW, bool nW) {
	_eW = eW;
	_sW = sW;
	_wW = wW;
	_nW = nW;	
}

void openGLCube(double* thisColor, double (*points)[3]) {
	
	glColor3f(thisColor[0], thisColor[1], thisColor[2]);
	
	glVertex3f(points[0][0], points[0][1], points[0][2]);
	glVertex3f(points[1][0], points[1][1], points[1][2]);
	glVertex3f(points[2][0], points[2][1], points[2][2]);
	glVertex3f(points[3][0], points[3][1], points[3][2]);

	glVertex3f(points[0][0], points[0][1], points[0][2]);
	glVertex3f(points[1][0], points[1][1], points[1][2]);
	glVertex3f(points[4][0], points[4][1], points[4][2]);
	glVertex3f(points[5][0], points[5][1], points[5][2]);

	glVertex3f(points[1][0], points[1][1], points[1][2]);
	glVertex3f(points[2][0], points[2][1], points[2][2]);
	glVertex3f(points[5][0], points[5][1], points[5][2]);
	glVertex3f(points[6][0], points[6][1], points[6][2]);

	glVertex3f(points[2][0], points[2][1], points[2][2]);
	glVertex3f(points[3][0], points[3][1], points[3][2]);
	glVertex3f(points[6][0], points[6][1], points[6][2]);
	glVertex3f(points[7][0], points[7][1], points[7][2]);

	glVertex3f(points[3][0], points[3][1], points[3][2]);
	glVertex3f(points[0][0], points[0][1], points[0][2]);
	glVertex3f(points[7][0], points[7][1], points[7][2]);
	glVertex3f(points[4][0], points[4][1], points[4][2]);

	glVertex3f(points[4][0], points[4][1], points[4][2]);
	glVertex3f(points[5][0], points[5][1], points[5][2]);
	glVertex3f(points[6][0], points[6][1], points[6][2]);
	glVertex3f(points[7][0], points[7][1], points[7][2]);

}


void InitGL(int Width, int Height)	        // We call this right after our OpenGL window is created.
{
  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);		// This Will Clear The Background Color To Black
  glClearDepth(1.0);				// Enables Clearing Of The Depth Buffer
  glDepthFunc(GL_LESS);			        // The Type Of Depth Test To Do
  glEnable(GL_DEPTH_TEST);		        // Enables Depth Testing
  glShadeModel(GL_SMOOTH);			// Enables Smooth Color Shading

  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();				// Reset The Projection Matrix

  gluPerspective(1.0f,(GLfloat)Width/(GLfloat)Height,100.0f,100.0f);	// Calculate The Aspect Ratio Of The Window

  glMatrixMode(GL_MODELVIEW);
}

/* The function called when our window is resized (which shouldn't happen, because we're fullscreen) */
void ReSizeGLScene(int Width, int Height)
{
  if (Height==0)				// Prevent A Divide By Zero If The Window Is Too Small
    Height=1;

  glViewport(0, 0, Width, Height);		// Reset The Current Viewport And Perspective Transformation

  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();

  gluPerspective(5000.0f,(GLfloat)Width/(GLfloat)Height,0.1f,10000.0f);
  //gluPerspective(10000.0f,1.0f,0.1f,10000.0f);
  glMatrixMode(GL_MODELVIEW);
}

/* The main drawing function. */
void DrawGLScene()
{
  extern Maze maze;
  extern Environment env;
  glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);	// Clear The Screen And The Depth Buffer
  glLoadIdentity();				// Reset The View

  /*glTranslatef(-1.5f,0.0f,-6.0f);		// Move Left 1.5 Units And Into The Screen 6.0
	
  glRotatef(rtri,0.0f,1.0f,0.0f);		// Rotate The Pyramid On The Y axis 

  // draw a pyramid (in smooth coloring mode)
  glBegin(GL_POLYGON);				// start drawing a pyramid

  // front face of pyramid
  glColor3f(1.0f,0.0f,0.0f);			// Set The Color To Red
  glVertex3f(0.0f, 1.0f, 0.0f);		        // Top of triangle (front)
  glColor3f(0.0f,1.0f,0.0f);			// Set The Color To Green
  glVertex3f(-1.0f,-1.0f, 1.0f);		// left of triangle (front)
  glColor3f(0.0f,0.0f,1.0f);			// Set The Color To Blue
  glVertex3f(1.0f,-1.0f, 1.0f);		        // right of traingle (front)	

  // right face of pyramid
  glColor3f(1.0f,0.0f,0.0f);			// Red
  glVertex3f( 0.0f, 1.0f, 0.0f);		// Top Of Triangle (Right)
  glColor3f(0.0f,0.0f,1.0f);			// Blue
  glVertex3f( 1.0f,-1.0f, 1.0f);		// Left Of Triangle (Right)
  glColor3f(0.0f,1.0f,0.0f);			// Green
  glVertex3f( 1.0f,-1.0f, -1.0f);		// Right Of Triangle (Right)

  // back face of pyramid
  glColor3f(1.0f,0.0f,0.0f);			// Red
  glVertex3f( 0.0f, 1.0f, 0.0f);		// Top Of Triangle (Back)
  glColor3f(0.0f,1.0f,0.0f);			// Green
  glVertex3f( 1.0f,-1.0f, -1.0f);		// Left Of Triangle (Back)
  glColor3f(0.0f,0.0f,1.0f);			// Blue
  glVertex3f(-1.0f,-1.0f, -1.0f);		// Right Of Triangle (Back)

  // left face of pyramid.
  glColor3f(1.0f,0.0f,0.0f);			// Red
  glVertex3f( 0.0f, 1.0f, 0.0f);		// Top Of Triangle (Left)
  glColor3f(0.0f,0.0f,1.0f);			// Blue
  glVertex3f(-1.0f,-1.0f,-1.0f);		// Left Of Triangle (Left)
  glColor3f(0.0f,1.0f,0.0f);			// Green
  glVertex3f(-1.0f,-1.0f, 1.0f);		// Right Of Triangle (Left)

  glEnd();					// Done Drawing The Pyramid
*/
  glLoadIdentity();				// make sure we're no longer rotated.
  glTranslatef(MAZE_WIDTH / 2, -MAZE_HIEGHT / 2,-20.0f);		// Move Right 3 Units, and back into the screen 7
	
  //glRotatef(rquad,1.0f,1.0f,1.0f);		// Rotate The Cube On X, Y, and Z
  glBegin(GL_QUADS);
  // draw a cube (6 quadrilaterals)
	double carPointsTop[8][3] = {
		{GRID_WIDTH / 2 - WALL_THICKNESS - env.state[1] * GRID_WIDTH, GRID_WIDTH / 2 - WALL_THICKNESS + env.state[0] * GRID_WIDTH, 0},
		{GRID_WIDTH / 2 - WALL_THICKNESS - env.state[1] * GRID_WIDTH, GRID_WIDTH / 2 + WALL_THICKNESS + env.state[0] * GRID_WIDTH, 0},
		{GRID_WIDTH / 2 + WALL_THICKNESS - env.state[1] * GRID_WIDTH, GRID_WIDTH / 2 + WALL_THICKNESS + env.state[0] * GRID_WIDTH, 0},
		{GRID_WIDTH / 2 + WALL_THICKNESS - env.state[1] * GRID_WIDTH, GRID_WIDTH / 2 + WALL_THICKNESS + env.state[0] * GRID_WIDTH, 0},
		{GRID_WIDTH / 2 - WALL_THICKNESS - env.state[1] * GRID_WIDTH, GRID_WIDTH / 2 - WALL_THICKNESS + env.state[0] * GRID_WIDTH, WALL_HEIGHT},
		{GRID_WIDTH / 2 - WALL_THICKNESS - env.state[1] * GRID_WIDTH, GRID_WIDTH / 2 + WALL_THICKNESS + env.state[0] * GRID_WIDTH, WALL_HEIGHT},
		{GRID_WIDTH / 2 + WALL_THICKNESS - env.state[1] * GRID_WIDTH, GRID_WIDTH / 2 + WALL_THICKNESS + env.state[0] * GRID_WIDTH, WALL_HEIGHT},
		{GRID_WIDTH / 2 + WALL_THICKNESS - env.state[1] * GRID_WIDTH, GRID_WIDTH / 2 + WALL_THICKNESS + env.state[0] * GRID_WIDTH, WALL_HEIGHT},

	};
	double theColor[3] = {1.0, 0, 1.0};
	openGLCube(theColor, carPointsTop);
	glEnd();
  //cout << env.state[0];
  
  double thisColor[3] = {1.0, 1.0, 0};
  int countWidth = -1;
  for(double wP = 0; wP > -MAZE_WIDTH; wP -= GRID_WIDTH) {
	countWidth++;
	int countHeight = -1;
    for(double hP = 0; hP < MAZE_HIEGHT; hP += GRID_WIDTH) {
		countHeight++;
		//cout << countHeight << countWidth << "-" <<(int)(mazeGrid[countHeight][countWidth]._nW == true) << ",";
		
		glBegin(GL_QUADS);				// start drawing the cube.
		if(maze.mazeGrid[countHeight][countWidth]._nW == true) {
			double cubePointsTop[8][3] = {
					{wP - WALL_THICKNESS, hP - WALL_THICKNESS, 0},
					{wP - WALL_THICKNESS, hP + WALL_THICKNESS, 0},
					{wP + WALL_THICKNESS + GRID_WIDTH, hP + WALL_THICKNESS, 0},
					{wP + WALL_THICKNESS + GRID_WIDTH, hP - WALL_THICKNESS, 0},
					{wP - WALL_THICKNESS, hP - WALL_THICKNESS, WALL_HEIGHT},
					{wP - WALL_THICKNESS, hP + WALL_THICKNESS, WALL_HEIGHT},
					{wP + WALL_THICKNESS + GRID_WIDTH, hP + WALL_THICKNESS, WALL_HEIGHT},
					{wP + WALL_THICKNESS + GRID_WIDTH, hP - WALL_THICKNESS, WALL_HEIGHT},
				};
			openGLCube(thisColor, cubePointsTop);
		}	  	
		
		if(maze.mazeGrid[countHeight][countWidth]._sW == true) {
			double cubePointsBottom[8][3] = {
					{wP - WALL_THICKNESS, hP + GRID_WIDTH - WALL_THICKNESS, 0},
					{wP - WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, 0},
					{wP + WALL_THICKNESS + GRID_WIDTH, hP + GRID_WIDTH + WALL_THICKNESS, 0},
					{wP + WALL_THICKNESS + GRID_WIDTH, hP + GRID_WIDTH - WALL_THICKNESS, 0},
					{wP - WALL_THICKNESS, hP + GRID_WIDTH - WALL_THICKNESS, WALL_HEIGHT},
					{wP - WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, WALL_HEIGHT},
					{wP + WALL_THICKNESS + GRID_WIDTH, hP + GRID_WIDTH + WALL_THICKNESS, WALL_HEIGHT},
					{wP + WALL_THICKNESS + GRID_WIDTH, hP + GRID_WIDTH - WALL_THICKNESS, WALL_HEIGHT},
				};
			openGLCube(thisColor, cubePointsBottom);
		}
	
		if(maze.mazeGrid[countHeight][countWidth]._eW == true) {
			double cubePointsRight[8][3] = {
					{wP - WALL_THICKNESS, hP - WALL_THICKNESS, 0},
					{wP - WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, 0},
					{wP + WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, 0},
					{wP + WALL_THICKNESS, hP - WALL_THICKNESS, 0},
					{wP - WALL_THICKNESS, hP - WALL_THICKNESS, WALL_HEIGHT},
					{wP - WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, WALL_HEIGHT},
					{wP + WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, WALL_HEIGHT},
					{wP + WALL_THICKNESS, hP - WALL_THICKNESS, WALL_HEIGHT}
				};
			openGLCube(thisColor, cubePointsRight);
		}
	 
		if(maze.mazeGrid[countHeight][countWidth]._wW == true) {
			double cubePointsLeft[8][3] = {
					{wP + GRID_WIDTH - WALL_THICKNESS, hP - WALL_THICKNESS, 0},
					{wP + GRID_WIDTH - WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, 0},
					{wP + GRID_WIDTH + WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, 0},
					{wP + GRID_WIDTH + WALL_THICKNESS, hP - WALL_THICKNESS, 0},
					{wP + GRID_WIDTH - WALL_THICKNESS, hP - WALL_THICKNESS, WALL_HEIGHT},
					{wP + GRID_WIDTH - WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, WALL_HEIGHT},
					{wP + GRID_WIDTH + WALL_THICKNESS, hP + GRID_WIDTH + WALL_THICKNESS, WALL_HEIGHT},
					{wP + GRID_WIDTH + WALL_THICKNESS, hP - WALL_THICKNESS, WALL_HEIGHT}
				};
			openGLCube(thisColor, cubePointsLeft);
		}
/*glVertex3f(0.0f, 1.0f, 0);		// Top Right Of The Quad (Top)
	  glVertex3f(0.0f, 0.0f, 0);		// Top Left Of The Quad (Top)
	  glVertex3f(1.0f, 0.0f, 1);		// Bottom Left Of The Quad (Top)
	  glVertex3f(1.0f, 1.0f, 1);*/		// Bottom Right Of The Quad (Top)

	  /*glColor3f(0.0f,1.0f,0.0f);			// Set The Color To Blue
	  glVertex3f(wP, hP, 0);		// Top Right Of The Quad (Top)
	  glVertex3f(wP, hP, WALL_HEIGHT);		// Top Left Of The Quad (Top)
	  glVertex3f(wP, hP + GRID_WIDTH, WALL_HEIGHT);		// Bottom Left Of The Quad (Top)
	  glVertex3f(wP, hP + GRID_WIDTH, 0);		// Bottom Right Of The Quad (Top)

	  glColor3f(1.0f,0.5f,0.0f);			// Set The Color To Orange
	  glVertex3f(wP + GRID_WIDTH, hP + GRID_WIDTH, WALL_HEIGHT);		// Bottom Left Of The Quad (Top)
	  glVertex3f(wP + GRID_WIDTH, hP + GRID_WIDTH, 0);		// Bottom Right Of The Quad (Top)
	  glVertex3f(wP + GRID_WIDTH, hP , 0);		// Top Right Of The Quad (Top)
	  glVertex3f(wP + GRID_WIDTH, hP, WALL_HEIGHT);		// Top Left Of The Quad (Top)

	  glColor3f(1.0f,0.0f,0.0f);			// Set The Color To Red
	  glVertex3f(wP, hP, 0);		// Top Right Of The Quad (Top)
	  glVertex3f(wP, hP, WALL_HEIGHT);		// Top Left Of The Quad (Top)
	  glVertex3f(wP + GRID_WIDTH, hP, WALL_HEIGHT);		// Bottom Left Of The Quad (Top)
	  glVertex3f(wP + GRID_WIDTH, hP, 0);		// Bottom Right Of The Quad (Top)

	  glColor3f(1.0f,1.0f,0.0f);			// Set The Color To Yellow
	  glVertex3f(wP, hP + GRID_WIDTH, 0);		// Top Right Of The Quad (Top)
	  glVertex3f(wP, hP + GRID_WIDTH, WALL_HEIGHT);		// Top Left Of The Quad (Top)
	  glVertex3f(wP + GRID_WIDTH, hP + GRID_WIDTH, WALL_HEIGHT);		// Bottom Left Of The Quad (Top)
	  glVertex3f(wP + GRID_WIDTH, hP + GRID_WIDTH, 0);		// Bottom Right Of The Quad (Top)*/
    	
  	  glEnd();					// Done Drawing The Cube
	}	
  }
  

  //rtri+=1.0f;					// Increase The Rotation Variable For The Pyramid
  //rquad-=1.0f;					// Decrease The Rotation Variable For The Cube

  // swap the buffers to display, since double buffering is used.
  glutSwapBuffers();
}

/* The function called whenever a key is pressed. */
void keyPressed(unsigned char key, int x, int y) 
{
    /* avoid thrashing this call */
    usleep(100);

    /* If escape is pressed, kill everything. */
    if (key == ESCAPE) 
    { 
      /* shut down our window */
      glutDestroyWindow(window); 
      
      /* exit the program...normal termination. */
      exit(0);                   
    }
}

void update(int value) {
	extern Environment env;	
    glutTimerFunc(1000, update, 0);
    glutPostRedisplay(); //Tell GLUT that the display has changed
	/*cout << env.state[0] << env.state[1];
	if(env.state[0] == 0 && env.state[1] == 4) {
		env.action(2);
	} else {
		env.action(1);
	}*/
    glutTimerFunc(1000, update, 0);
}

void Environment::render() {
	
	int myargc = 1;
	char *myargv[1];
	myargv[0] = strdup("Dummy");

	glutInit(&myargc, myargv);  
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_ALPHA | GLUT_DEPTH);  
	glutInitWindowSize(640, 480);  

	glutInitWindowPosition(0, 0);  
	window = glutCreateWindow("Jeff Molofee's GL Code Tutorial ... NeHe '99");  
	glutDisplayFunc(&DrawGLScene);  
	glutFullScreen();
	glutIdleFunc(&DrawGLScene);
	glutReshapeFunc(&ReSizeGLScene);
	glutKeyboardFunc(&keyPressed);
	InitGL(640, 480);
	glutTimerFunc(1000, update, 0);
	glutMainLoop();  
}


